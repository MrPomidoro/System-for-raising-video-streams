// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Kseniya-cha/System-for-raising-video-streams/internal/refreshstream (interfaces: Common)

// Package repositoryMock is a generated GoMock package.
package repositoryMock

import (
	context "context"
	reflect "reflect"

	refreshstream "github.com/Kseniya-cha/System-for-raising-video-streams/internal/refreshstream"
	customError "github.com/Kseniya-cha/System-for-raising-video-streams/pkg/customError"
	gomock "github.com/golang/mock/gomock"
)

// MockCommon is a mock of Common interface.
type MockCommon struct {
	ctrl     *gomock.Controller
	recorder *MockCommonMockRecorder
}

// MockCommonMockRecorder is the mock recorder for MockCommon.
type MockCommonMockRecorder struct {
	mock *MockCommon
}

// NewMockCommon creates a new mock instance.
func NewMockCommon(ctrl *gomock.Controller) *MockCommon {
	mock := &MockCommon{ctrl: ctrl}
	mock.recorder = &MockCommonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommon) EXPECT() *MockCommonMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCommon) Get(arg0 context.Context, arg1 bool) ([]refreshstream.Stream, customError.IError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]refreshstream.Stream)
	ret1, _ := ret[1].(customError.IError)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCommonMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommon)(nil).Get), arg0, arg1)
}
