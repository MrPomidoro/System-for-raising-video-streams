// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Kseniya-cha/System-for-raising-video-streams/pkg/database/postgresql (interfaces: IDB)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgxpool "github.com/jackc/pgx/v5/pgxpool"
	zap "go.uber.org/zap"
)

// MockIDB is a mock of IDB interface.
type MockIDB struct {
	ctrl     *gomock.Controller
	recorder *MockIDBMockRecorder
}

// MockIDBMockRecorder is the mock recorder for MockIDB.
type MockIDBMockRecorder struct {
	mock *MockIDB
}

// NewMockIDB creates a new mock instance.
func NewMockIDB(ctrl *gomock.Controller) *MockIDB {
	mock := &MockIDB{ctrl: ctrl}
	mock.recorder = &MockIDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDB) EXPECT() *MockIDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIDB) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIDB)(nil).Close))
}

// GetConn mocks base method.
func (m *MockIDB) GetConn() *pgxpool.Pool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn")
	ret0, _ := ret[0].(*pgxpool.Pool)
	return ret0
}

// GetConn indicates an expected call of GetConn.
func (mr *MockIDBMockRecorder) GetConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockIDB)(nil).GetConn))
}

// IsConn mocks base method.
func (m *MockIDB) IsConn(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConn", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConn indicates an expected call of IsConn.
func (mr *MockIDBMockRecorder) IsConn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConn", reflect.TypeOf((*MockIDB)(nil).IsConn), arg0)
}

// KeepAlive mocks base method.
func (m *MockIDB) KeepAlive(arg0 context.Context, arg1 *zap.Logger, arg2 chan error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "KeepAlive", arg0, arg1, arg2)
}

// KeepAlive indicates an expected call of KeepAlive.
func (mr *MockIDBMockRecorder) KeepAlive(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepAlive", reflect.TypeOf((*MockIDB)(nil).KeepAlive), arg0, arg1, arg2)
}
